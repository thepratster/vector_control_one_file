// Aa code produced by llvm2aa (version 1.0)
$pipe in_data1 : $float<8,23> $depth 1
$pipe in_data2 : $float<8,23> $depth 1
$pipe in_data3 : $float<8,23> $depth 1
$pipe in_data4 : $float<8,23> $depth 1
$pipe in_data5 : $float<8,23> $depth 1
$pipe out_data1 : $float<8,23> $depth 1
$pipe out_data2 : $float<8,23> $depth 1
$pipe out_data3 : $float<8,23> $depth 1
$pipe out_data4 : $float<8,23> $depth 1
$module [getSlice64] 
$in (reg : $uint<64> h : $uint<8> l : $uint<8> )
$out (ret_val__ : $uint<64>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := ($cast ($uint<64>) h)
    iNsTr_1 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111111 )  - iNsTr_0)
    iNsTr_2 := (iNsTr_1 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    iNsTr_3 := (reg << iNsTr_2)
    iNsTr_4 := ($cast ($uint<64>) l)
    iNsTr_5 := (iNsTr_1 + iNsTr_4)
    iNsTr_6 := (iNsTr_5 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    ret_val__ := (iNsTr_3 >> iNsTr_6)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getBit64] 
$in (reg : $uint<64> pos : $uint<8> )
$out (ret_val__ : $uint<8>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := ($cast ($uint<64>) pos)
    iNsTr_1 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111111 )  - iNsTr_0)
    iNsTr_2 := (iNsTr_1 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    iNsTr_3 := (reg << iNsTr_2)
    iNsTr_4 := (iNsTr_3 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111111 ) )
    ret_val__ := ($cast ($uint<8>) iNsTr_4)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [setSlice64] 
$in (reg : $uint<64> h : $uint<8> l : $uint<8> value : $uint<64> )
$out (ret_val__ : $uint<64>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := ($cast ($uint<64>) h)
    iNsTr_1 := ($cast ($uint<64>) l)
    iNsTr_2 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111111 )  - iNsTr_0)
    iNsTr_3 := (iNsTr_2 + iNsTr_1)
    iNsTr_4 := (iNsTr_3 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    iNsTr_5 := (( $bitcast ($uint<64> ) _b1111111111111111111111111111111111111111111111111111111111111111 )  >> iNsTr_4)
    iNsTr_6 := (iNsTr_5 & value)
    iNsTr_7 := (iNsTr_6 << iNsTr_1)
    iNsTr_8 := (iNsTr_5 << iNsTr_1)
    iNsTr_9 := (iNsTr_8 ^ ( $bitcast ($uint<64> ) _b1111111111111111111111111111111111111111111111111111111111111111 ) )
    iNsTr_10 := (iNsTr_9 & reg)
    ret_val__ := (iNsTr_10 | iNsTr_7)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [setBit64] 
$in (reg : $uint<64> pos : $uint<8> value : $uint<8> )
$out (ret_val__ : $uint<64>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := ($cast ($uint<64>) value)
    iNsTr_1 := ($cast ($uint<64>) pos)
    iNsTr_2 := (iNsTr_0 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_3 := (iNsTr_2 << iNsTr_1)
    iNsTr_4 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  << iNsTr_1)
    iNsTr_5 := (iNsTr_4 ^ ( $bitcast ($uint<64> ) _b1111111111111111111111111111111111111111111111111111111111111111 ) )
    iNsTr_6 := (iNsTr_5 & reg)
    ret_val__ := (iNsTr_6 | iNsTr_3)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [fdiv32] 
$in (a : $float<11,52> b : $float<11,52> )
$out (ret_val__ : $float<11,52>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    tmp17 := ($bitcast ($uint<64>) a)
    tmp15 := ($bitcast ($uint<64>) b)
    iNsTr_0 := (tmp17 & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    iNsTr_1 := (tmp15 & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    // compare instruction
    iNsTr_2 := (iNsTr_0 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if iNsTr_2 $then  $place [bb_0_bb_2] $else $place [bb_0_bb_1] $endif 
    //begin: basic-block bb_1
    $merge bb_0_bb_1
    $endmerge
    iNsTr_25 := (tmp15 & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    tmp17x_xmask := (tmp17 & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    iNsTr_26 := (tmp17x_xmask + ( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 ) )
    phitmp := (iNsTr_26 - iNsTr_25)
    phitmp20 := (phitmp & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    $place [bb_1_bb_2]
    //begin: basic-block bb_2
    $merge bb_0_bb_2 bb_1_bb_2
    $phi iNsTr_4 :=  ( $cast ($uint<64>) phitmp20) $on bb_1_bb_2 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_0_bb_2 
    $endmerge
    iNsTr_5 := (tmp17 & ( $bitcast ($uint<64> ) _b0000000000001111111111111111111111111111111111111111111111111111 ) )
    iNsTr_6 := (tmp15 | ( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 ) )
    iNsTr_7 := (iNsTr_4 | iNsTr_5)
    iNsTr_8 := (iNsTr_6 & ( $bitcast ($uint<64> ) _b0011111111101111111111111111111111111111111111111111111111111111 ) )
    tmp13 := ($bitcast ($float<11,52>) iNsTr_7)
    tmp11 := ($bitcast ($float<11,52>) iNsTr_8)
    iNsTr_9 := (tmp11 * ( $bitcast ($float<11,52> ) _f1.882353e+00 ) )
    iNsTr_10 := (( $bitcast ($float<11,52> ) _f2.823529e+00 )  - iNsTr_9)
    iNsTr_11 := (tmp11 * iNsTr_10)
    iNsTr_12 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_11)
    iNsTr_13 := (iNsTr_10 * iNsTr_12)
    iNsTr_14 := (tmp11 * iNsTr_13)
    iNsTr_15 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_14)
    iNsTr_16 := (iNsTr_13 * iNsTr_15)
    iNsTr_17 := (tmp11 * iNsTr_16)
    iNsTr_18 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_17)
    iNsTr_19 := (iNsTr_16 * iNsTr_18)
    iNsTr_20 := (tmp11 * iNsTr_19)
    iNsTr_21 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_20)
    iNsTr_22 := (iNsTr_19 * iNsTr_21)
    // compare instruction
    iNsTr_23 := (iNsTr_1 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    orx_xcond := (iNsTr_2 | iNsTr_23)
    $if orx_xcond $then  $place [bb_2_bb_4] $else $place [bb_2_bb_3] $endif 
    //begin: basic-block bb_3
    $merge bb_2_bb_3
    $endmerge
    iNsTr_33 := (tmp13 * iNsTr_22)
    phitmp19 := ($bitcast ($uint<64>) iNsTr_33)
    phitmp21 := (phitmp19 & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    $place [bb_3_bb_4]
    //begin: basic-block bb_4
    $merge bb_2_bb_4 bb_3_bb_4
    $phi iNsTr_28 :=  ( $cast ($uint<64>) phitmp21) $on bb_3_bb_4 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_2_bb_4 
    $endmerge
    iNsTr_29 := (tmp15 ^ tmp17)
    iNsTr_30 := (iNsTr_29 & ( $bitcast ($uint<64> ) _b1000000000000000000000000000000000000000000000000000000000000000 ) )
    iNsTr_31 := (iNsTr_28 | iNsTr_30)
    ret_val__ := ($bitcast ($float<11,52>) iNsTr_31)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [fpmul32f] 
$in (x : $float<8,23> y : $float<8,23> )
$out (ret_val__ : $float<8,23>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    ret_val__ := (x * y)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [fpadd32f] 
$in (x : $float<8,23> y : $float<8,23> )
$out (ret_val__ : $float<8,23>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    ret_val__ := (x + y)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [fpsub32f] 
$in (x : $float<8,23> y : $float<8,23> )
$out (ret_val__ : $float<8,23>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    ret_val__ := (x - y)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [fpadd32fi] 
$in (x : $uint<32> y : $uint<32> )
$out (ret_val__ : $uint<32>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    ret_val__ := (y + x)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [fpsub32fi] 
$in (x : $uint<32> y : $uint<32> )
$out (ret_val__ : $uint<32>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    ret_val__ := (x - y)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [rotor_flux_calc] 
$in (del_t : $float<8,23> Lm : $float<8,23> id : $float<8,23> flux_rotor_prev : $float<8,23> tau_new : $float<8,23> tau_r : $float<8,23> )
$out (ret_val__ : $float<8,23>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := (flux_rotor_prev * ( $bitcast ($float<8,23> ) _f9.995000e-01 ) )
    iNsTr_1 := (id * ( $bitcast ($float<8,23> ) _f8.096000e-01 ) )
    iNsTr_2 := (iNsTr_1 * ( $bitcast ($float<8,23> ) _f5.000000e-04 ) )
    ret_val__ := (iNsTr_2 + iNsTr_0)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [omega_calc] 
$in (Lm : $float<8,23> iq : $float<8,23> tau_r : $float<8,23> flux_rotor : $float<8,23> )
$out (ret_val__ : $float<8,23>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := (iq * ( $bitcast ($float<8,23> ) _f8.096000e-01 ) )
    iNsTr_1 := (tau_r * flux_rotor)
    iNsTr_2 := ($cast ($float<11,52>) iNsTr_0)
    iNsTr_3 := ($cast ($float<11,52>) iNsTr_1)
    tmp17x_xi := ($bitcast ($uint<64>) iNsTr_2)
    tmp15x_xi := ($bitcast ($uint<64>) iNsTr_3)
    iNsTr_4 := (tmp17x_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    iNsTr_5 := (tmp15x_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    // compare instruction
    iNsTr_6 := (iNsTr_4 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if iNsTr_6 $then  $place [bb_0_bb_2] $else $place [bb_0_bb_1] $endif 
    //begin: basic-block bb_1
    $merge bb_0_bb_1
    $endmerge
    iNsTr_24 := (tmp15x_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    tmp17x_xmaskx_xi := (tmp17x_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    iNsTr_25 := (tmp17x_xmaskx_xi + ( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 ) )
    phitmpx_xi := (iNsTr_25 - iNsTr_24)
    phitmp20x_xi := (phitmpx_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    $place [bb_1_bb_2]
    //begin: basic-block bb_2
    $merge bb_0_bb_2 bb_1_bb_2
    $phi iNsTr_8 :=  ( $cast ($uint<64>) phitmp20x_xi) $on bb_1_bb_2 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_0_bb_2 
    $endmerge
    iNsTr_9 := (tmp15x_xi | ( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 ) )
    iNsTr_10 := (iNsTr_9 & ( $bitcast ($uint<64> ) _b0011111111101111111111111111111111111111111111111111111111111111 ) )
    tmp11x_xi := ($bitcast ($float<11,52>) iNsTr_10)
    iNsTr_11 := (tmp11x_xi * ( $bitcast ($float<11,52> ) _f1.882353e+00 ) )
    iNsTr_12 := (( $bitcast ($float<11,52> ) _f2.823529e+00 )  - iNsTr_11)
    iNsTr_13 := (tmp11x_xi * iNsTr_12)
    iNsTr_14 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_13)
    iNsTr_15 := (iNsTr_12 * iNsTr_14)
    iNsTr_16 := (tmp11x_xi * iNsTr_15)
    iNsTr_17 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_16)
    iNsTr_18 := (iNsTr_15 * iNsTr_17)
    iNsTr_19 := (tmp11x_xi * iNsTr_18)
    iNsTr_20 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_19)
    iNsTr_21 := (iNsTr_18 * iNsTr_20)
    // compare instruction
    iNsTr_22 := (iNsTr_5 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    orx_xcondx_xi := (iNsTr_6 | iNsTr_22)
    $if orx_xcondx_xi $then  $place [bb_2_fdiv32x_xexit] $else $place [bb_2_bb_3] $endif 
    //begin: basic-block bb_3
    $merge bb_2_bb_3
    $endmerge
    iNsTr_33 := (tmp11x_xi * iNsTr_21)
    iNsTr_34 := (tmp17x_xi & ( $bitcast ($uint<64> ) _b0000000000001111111111111111111111111111111111111111111111111111 ) )
    iNsTr_35 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_33)
    iNsTr_36 := (iNsTr_8 | iNsTr_34)
    iNsTr_37 := (iNsTr_21 * iNsTr_35)
    tmp13x_xi := ($bitcast ($float<11,52>) iNsTr_36)
    iNsTr_38 := (tmp13x_xi * iNsTr_37)
    phitmp19x_xi := ($bitcast ($uint<64>) iNsTr_38)
    phitmp21x_xi := (phitmp19x_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    $place [bb_3_fdiv32x_xexit]
    //begin: basic-block fdiv32x_xexit
    $merge bb_2_fdiv32x_xexit bb_3_fdiv32x_xexit
    $phi iNsTr_27 :=  ( $cast ($uint<64>) phitmp21x_xi) $on bb_3_fdiv32x_xexit ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_2_fdiv32x_xexit 
    $endmerge
    iNsTr_28 := (tmp15x_xi ^ tmp17x_xi)
    iNsTr_29 := (iNsTr_28 & ( $bitcast ($uint<64> ) _b1000000000000000000000000000000000000000000000000000000000000000 ) )
    iNsTr_30 := (iNsTr_27 | iNsTr_29)
    tmp4x_xi := ($bitcast ($float<11,52>) iNsTr_30)
    ret_val__ := ($cast ($float<8,23>) tmp4x_xi)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [theta_calc] 
$in (omega_r : $float<8,23> omega_m : $float<8,23> del_t : $float<8,23> theta_prev : $float<8,23> )
$out (ret_val__ : $float<8,23>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := (omega_m * del_t)
    ret_val__ := (iNsTr_0 + theta_prev)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [iq_err_calc] 
$in (Lr : $float<8,23> torque_ref : $float<8,23> constant_1 : $float<8,23> flux_rotor : $float<8,23> )
$out (ret_val__ : $float<8,23>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    iNsTr_0 := (Lr * ( $bitcast ($float<8,23> ) _f4.000000e+00 ) )
    iNsTr_1 := (iNsTr_0 * torque_ref)
    iNsTr_2 := (constant_1 * flux_rotor)
    iNsTr_3 := ($cast ($float<11,52>) iNsTr_1)
    iNsTr_4 := ($cast ($float<11,52>) iNsTr_2)
    tmp17x_xi := ($bitcast ($uint<64>) iNsTr_3)
    tmp15x_xi := ($bitcast ($uint<64>) iNsTr_4)
    iNsTr_5 := (tmp17x_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    iNsTr_6 := (tmp15x_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    // compare instruction
    iNsTr_7 := (iNsTr_5 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if iNsTr_7 $then  $place [bb_0_bb_2] $else $place [bb_0_bb_1] $endif 
    //begin: basic-block bb_1
    $merge bb_0_bb_1
    $endmerge
    iNsTr_25 := (tmp15x_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    tmp17x_xmaskx_xi := (tmp17x_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    iNsTr_26 := (tmp17x_xmaskx_xi + ( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 ) )
    phitmpx_xi := (iNsTr_26 - iNsTr_25)
    phitmp20x_xi := (phitmpx_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    $place [bb_1_bb_2]
    //begin: basic-block bb_2
    $merge bb_0_bb_2 bb_1_bb_2
    $phi iNsTr_9 :=  ( $cast ($uint<64>) phitmp20x_xi) $on bb_1_bb_2 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_0_bb_2 
    $endmerge
    iNsTr_10 := (tmp15x_xi | ( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 ) )
    iNsTr_11 := (iNsTr_10 & ( $bitcast ($uint<64> ) _b0011111111101111111111111111111111111111111111111111111111111111 ) )
    tmp11x_xi := ($bitcast ($float<11,52>) iNsTr_11)
    iNsTr_12 := (tmp11x_xi * ( $bitcast ($float<11,52> ) _f1.882353e+00 ) )
    iNsTr_13 := (( $bitcast ($float<11,52> ) _f2.823529e+00 )  - iNsTr_12)
    iNsTr_14 := (tmp11x_xi * iNsTr_13)
    iNsTr_15 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_14)
    iNsTr_16 := (iNsTr_13 * iNsTr_15)
    iNsTr_17 := (tmp11x_xi * iNsTr_16)
    iNsTr_18 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_17)
    iNsTr_19 := (iNsTr_16 * iNsTr_18)
    iNsTr_20 := (tmp11x_xi * iNsTr_19)
    iNsTr_21 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_20)
    iNsTr_22 := (iNsTr_19 * iNsTr_21)
    // compare instruction
    iNsTr_23 := (iNsTr_6 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    orx_xcondx_xi := (iNsTr_7 | iNsTr_23)
    $if orx_xcondx_xi $then  $place [bb_2_fdiv32x_xexit] $else $place [bb_2_bb_3] $endif 
    //begin: basic-block bb_3
    $merge bb_2_bb_3
    $endmerge
    iNsTr_34 := (tmp11x_xi * iNsTr_22)
    iNsTr_35 := (tmp17x_xi & ( $bitcast ($uint<64> ) _b0000000000001111111111111111111111111111111111111111111111111111 ) )
    iNsTr_36 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_34)
    iNsTr_37 := (iNsTr_9 | iNsTr_35)
    iNsTr_38 := (iNsTr_22 * iNsTr_36)
    tmp13x_xi := ($bitcast ($float<11,52>) iNsTr_37)
    iNsTr_39 := (tmp13x_xi * iNsTr_38)
    phitmp19x_xi := ($bitcast ($uint<64>) iNsTr_39)
    phitmp21x_xi := (phitmp19x_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    $place [bb_3_fdiv32x_xexit]
    //begin: basic-block fdiv32x_xexit
    $merge bb_2_fdiv32x_xexit bb_3_fdiv32x_xexit
    $phi iNsTr_28 :=  ( $cast ($uint<64>) phitmp21x_xi) $on bb_3_fdiv32x_xexit ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_2_fdiv32x_xexit 
    $endmerge
    iNsTr_29 := (tmp15x_xi ^ tmp17x_xi)
    iNsTr_30 := (iNsTr_29 & ( $bitcast ($uint<64> ) _b1000000000000000000000000000000000000000000000000000000000000000 ) )
    iNsTr_31 := (iNsTr_28 | iNsTr_30)
    tmp4x_xi := ($bitcast ($float<11,52>) iNsTr_31)
    ret_val__ := ($cast ($float<8,23>) tmp4x_xi)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [vector_control_daemon] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $place [bb_0_bb_1]
    //begin: basic-block bb_1
    $merge bb_0_bb_1 fdiv32x_xexit_bb_1
    $phi theta_prevx_x0 :=  ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f0.000000e+00 ) ) $on bb_0_bb_1 ( $cast ($float<8,23>) iNsTr_42) $on fdiv32x_xexit_bb_1 
    $phi flux_rotor_prevx_x0 :=  ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f0.000000e+00 ) ) $on bb_0_bb_1 ( $cast ($float<8,23>) phitmp1) $on fdiv32x_xexit_bb_1 
    $phi int_speed_err_temp_2x_x0 :=  ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f0.000000e+00 ) ) $on bb_0_bb_1 ( $cast ($float<8,23>) iNsTr_19) $on fdiv32x_xexit_bb_1 
    $phi int_flux_err_temp_2x_x0 :=  ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f0.000000e+00 ) ) $on bb_0_bb_1 ( $cast ($float<8,23>) iNsTr_90) $on fdiv32x_xexit_bb_1 
    $phi id_prevx_x0 :=  ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f0.000000e+00 ) ) $on bb_0_bb_1 ( $cast ($float<8,23>) phitmp3) $on fdiv32x_xexit_bb_1 
    $phi speed_refx_x1 :=  ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f1.400000e+03 ) ) $on bb_0_bb_1 ( $cast ($float<8,23>) speed_refx_x0) $on fdiv32x_xexit_bb_1 
    $endmerge
    iNsTr_2 := in_data1
    iNsTr_4 := in_data2
    iNsTr_6 := in_data3
    iNsTr_8 := in_data4
    iNsTr_10 := in_data5
    // compare instruction
    iNsTr_11 := (speed_refx_x1 < iNsTr_8 )
    $if iNsTr_11 $then  $place [bb_1_bb_2] $else $place [bb_1_bb_3] $endif 
    //begin: basic-block bb_2
    $merge bb_1_bb_2
    $endmerge
    iNsTr_13 := (speed_refx_x1 + ( $bitcast ($float<8,23> ) _f5.000000e+00 ) )
    $place [bb_2_bb_5]
    //begin: basic-block bb_3
    $merge bb_1_bb_3
    $endmerge
    // compare instruction
    iNsTr_15 := (speed_refx_x1 > iNsTr_8 )
    $if iNsTr_15 $then  $place [bb_3_bb_4] $else $place [bb_3_bb_5] $endif 
    //begin: basic-block bb_4
    $merge bb_3_bb_4
    $endmerge
    iNsTr_24 := (speed_refx_x1 + ( $bitcast ($float<8,23> ) _f-5.000000e+00 ) )
    $place [bb_4_bb_5]
    //begin: basic-block bb_5
    $merge bb_2_bb_5 bb_3_bb_5 bb_4_bb_5
    $phi speed_refx_x0 :=  ( $cast ($float<8,23>) iNsTr_13) $on bb_2_bb_5 ( $cast ($float<8,23>) iNsTr_24) $on bb_4_bb_5 ( $cast ($float<8,23>) speed_refx_x1) $on bb_3_bb_5 
    $endmerge
    iNsTr_17 := (speed_refx_x0 - iNsTr_6)
    iNsTr_18 := (iNsTr_17 * ( $bitcast ($float<8,23> ) _f5.000000e-05 ) )
    iNsTr_19 := (iNsTr_18 + int_speed_err_temp_2x_x0)
    iNsTr_20 := (iNsTr_19 * ( $bitcast ($float<8,23> ) _f1.000000e+01 ) )
    iNsTr_21 := ($cast ($float<11,52>) iNsTr_20)
    // compare instruction
    iNsTr_22 := (iNsTr_21 < ( $bitcast ($float<11,52> ) _f-2.000000e+01 )  )
    $if iNsTr_22 $then  $place [bb_5_bb_8] $else $place [bb_5_bb_6] $endif 
    //begin: basic-block bb_6
    $merge bb_5_bb_6
    $endmerge
    // compare instruction
    iNsTr_30 := (iNsTr_21 > ( $bitcast ($float<11,52> ) _f2.000000e+01 )  )
    $if iNsTr_30 $then  $place [bb_6_bb_8] $else $place [bb_6_bb_7] $endif 
    //begin: basic-block bb_7
    $merge bb_6_bb_7
    $endmerge
    $place [bb_7_bb_8]
    //begin: basic-block bb_8
    $merge bb_5_bb_8 bb_6_bb_8 bb_7_bb_8
    $phi int_speed_errx_x0 :=  ( $cast ($float<8,23>) iNsTr_20) $on bb_7_bb_8 ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f-2.000000e+01 ) ) $on bb_5_bb_8 ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f2.000000e+01 ) ) $on bb_6_bb_8 
    $endmerge
    iNsTr_26 := (iNsTr_17 * ( $bitcast ($float<8,23> ) _f5.000000e+00 ) )
    iNsTr_27 := (int_speed_errx_x0 + iNsTr_26)
    // compare instruction
    iNsTr_28 := (iNsTr_27 < ( $bitcast ($float<8,23> ) _f-4.000000e+01 )  )
    $if iNsTr_28 $then  $place [bb_8_bb_11] $else $place [bb_8_bb_9] $endif 
    //begin: basic-block bb_9
    $merge bb_8_bb_9
    $endmerge
    // compare instruction
    iNsTr_35 := (iNsTr_27 > ( $bitcast ($float<8,23> ) _f4.000000e+01 )  )
    $if iNsTr_35 $then  $place [bb_9_bb_11] $else $place [bb_9_bb_10] $endif 
    //begin: basic-block bb_10
    $merge bb_9_bb_10
    $endmerge
    phitmp4 := (iNsTr_27 * ( $bitcast ($float<8,23> ) _f3.367000e+00 ) )
    phitmp5 := ($cast ($float<11,52>) phitmp4)
    phitmp6 := ($bitcast ($uint<64>) phitmp5)
    $place [bb_10_bb_11]
    //begin: basic-block bb_11
    $merge bb_10_bb_11 bb_8_bb_11 bb_9_bb_11
    $phi torque_refx_x0 :=  ( $cast ($uint<64>) phitmp6) $on bb_10_bb_11 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b1100000001100000110101011100001010100000000000000000000000000000 ) ) $on bb_8_bb_11 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0100000001100000110101011100001010100000000000000000000000000000 ) ) $on bb_9_bb_11 
    $endmerge
    iNsTr_32 := ($cast ($float<11,52>) speed_refx_x0)
    // compare instruction
    iNsTr_33 := (iNsTr_32 > ( $bitcast ($float<11,52> ) _f2.000000e+03 )  )
    $if iNsTr_33 $then  $place [bb_11_bb_12] $else $place [bb_11_bb_17] $endif 
    //begin: basic-block bb_12
    $merge bb_11_bb_12
    $endmerge
    // compare instruction
    iNsTr_38 := (iNsTr_32 > ( $bitcast ($float<11,52> ) _f2.500000e+03 )  )
    $if iNsTr_38 $then  $place [bb_12_bb_14] $else $place [bb_12_bb_13] $endif 
    //begin: basic-block bb_13
    $merge bb_12_bb_13
    $endmerge
    iNsTr_52 := (speed_refx_x0 * ( $bitcast ($float<8,23> ) _f-2.000000e-04 ) )
    iNsTr_53 := (iNsTr_52 + ( $bitcast ($float<8,23> ) _f1.400000e+00 ) )
    iNsTr_54 := (iNsTr_53 * ( $bitcast ($float<8,23> ) _f3.000000e-01 ) )
    $place [bb_13_bb_17]
    //begin: basic-block bb_14
    $merge bb_12_bb_14
    $endmerge
    // compare instruction
    iNsTr_50 := (iNsTr_32 > ( $bitcast ($float<11,52> ) _f3.000000e+03 )  )
    $if iNsTr_50 $then  $place [bb_14_bb_16] $else $place [bb_14_bb_15] $endif 
    //begin: basic-block bb_15
    $merge bb_14_bb_15
    $endmerge
    iNsTr_79 := (speed_refx_x0 * ( $bitcast ($float<8,23> ) _f-3.600000e-04 ) )
    iNsTr_80 := (iNsTr_79 + ( $bitcast ($float<8,23> ) _f1.800000e+00 ) )
    iNsTr_81 := (iNsTr_80 * ( $bitcast ($float<8,23> ) _f3.000000e-01 ) )
    $place [bb_15_bb_17]
    //begin: basic-block bb_16
    $merge bb_14_bb_16
    $endmerge
    iNsTr_75 := (speed_refx_x0 * ( $bitcast ($float<8,23> ) _f-4.200000e-04 ) )
    iNsTr_76 := (iNsTr_75 + ( $bitcast ($float<8,23> ) _f1.980000e+00 ) )
    iNsTr_77 := (iNsTr_76 * ( $bitcast ($float<8,23> ) _f3.000000e-01 ) )
    $place [bb_16_bb_17]
    //begin: basic-block bb_17
    $merge bb_11_bb_17 bb_13_bb_17 bb_15_bb_17 bb_16_bb_17
    $phi flux_refx_x0 :=  ( $cast ($float<8,23>) iNsTr_54) $on bb_13_bb_17 ( $cast ($float<8,23>) iNsTr_81) $on bb_15_bb_17 ( $cast ($float<8,23>) iNsTr_77) $on bb_16_bb_17 ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f3.000000e-01 ) ) $on bb_11_bb_17 
    $endmerge
    iNsTr_40 := (id_prevx_x0 + flux_rotor_prevx_x0)
    iNsTr_41 := (iNsTr_10 * ( $bitcast ($float<8,23> ) _f5.000000e-05 ) )
    iNsTr_42 := (iNsTr_41 + theta_prevx_x0)
    iNsTr_43 := (iNsTr_40 * ( $bitcast ($float<8,23> ) _f9.715200e+00 ) )
    iNsTr_44 := ($cast ($float<11,52>) iNsTr_43)
    tmp15x_xix_xi := ($bitcast ($uint<64>) iNsTr_44)
    iNsTr_45 := (torque_refx_x0 & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    iNsTr_46 := (tmp15x_xix_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    // compare instruction
    iNsTr_47 := (iNsTr_45 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if iNsTr_47 $then  $place [bb_17_bb_19] $else $place [bb_17_bb_18] $endif 
    //begin: basic-block bb_18
    $merge bb_17_bb_18
    $endmerge
    iNsTr_72 := (tmp15x_xix_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    tmp17x_xmaskx_xix_xi := (torque_refx_x0 & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    iNsTr_73 := (( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 )  - iNsTr_72)
    phitmpx_xix_xi := (iNsTr_73 + tmp17x_xmaskx_xix_xi)
    phitmp20x_xix_xi := (phitmpx_xix_xi & ( $bitcast ($uint<64> ) _b0111111111110000000000000000000000000000000000000000000000000000 ) )
    $place [bb_18_bb_19]
    //begin: basic-block bb_19
    $merge bb_17_bb_19 bb_18_bb_19
    $phi iNsTr_56 :=  ( $cast ($uint<64>) phitmp20x_xix_xi) $on bb_18_bb_19 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_17_bb_19 
    $endmerge
    iNsTr_57 := (tmp15x_xix_xi | ( $bitcast ($uint<64> ) _b0011111111100000000000000000000000000000000000000000000000000000 ) )
    iNsTr_58 := (iNsTr_57 & ( $bitcast ($uint<64> ) _b0011111111101111111111111111111111111111111111111111111111111111 ) )
    tmp11x_xix_xi := ($bitcast ($float<11,52>) iNsTr_58)
    iNsTr_59 := (tmp11x_xix_xi * ( $bitcast ($float<11,52> ) _f1.882353e+00 ) )
    iNsTr_60 := (( $bitcast ($float<11,52> ) _f2.823529e+00 )  - iNsTr_59)
    iNsTr_61 := (tmp11x_xix_xi * iNsTr_60)
    iNsTr_62 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_61)
    iNsTr_63 := (iNsTr_60 * iNsTr_62)
    iNsTr_64 := (tmp11x_xix_xi * iNsTr_63)
    iNsTr_65 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_64)
    iNsTr_66 := (iNsTr_63 * iNsTr_65)
    iNsTr_67 := (tmp11x_xix_xi * iNsTr_66)
    iNsTr_68 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_67)
    iNsTr_69 := (iNsTr_66 * iNsTr_68)
    // compare instruction
    iNsTr_70 := (iNsTr_46 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    orx_xcondx_xix_xi := (iNsTr_47 | iNsTr_70)
    $if orx_xcondx_xix_xi $then  $place [bb_19_iq_err_calcx_xexit] $else $place [bb_19_bb_20] $endif 
    //begin: basic-block bb_20
    $merge bb_19_bb_20
    $endmerge
    iNsTr_94 := (tmp11x_xix_xi * iNsTr_69)
    iNsTr_95 := (torque_refx_x0 & ( $bitcast ($uint<64> ) _b0000000000001111111111111111111111111111111111111111111111111111 ) )
    iNsTr_96 := (( $bitcast ($float<11,52> ) _f2.000000e+00 )  - iNsTr_94)
    iNsTr_97 := (iNsTr_56 | iNsTr_95)
    iNsTr_98 := (iNsTr_69 * iNsTr_96)
    tmp13x_xix_xi := ($bitcast ($float<11,52>) iNsTr_97)
    iNsTr_99 := (tmp13x_xix_xi * iNsTr_98)
    phitmp19x_xix_xi := ($bitcast ($uint<64>) iNsTr_99)
    phitmp21x_xix_xi := (phitmp19x_xix_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    $place [bb_20_iq_err_calcx_xexit]
    //begin: basic-block iq_err_calcx_xexit
    $merge bb_19_iq_err_calcx_xexit bb_20_iq_err_calcx_xexit
    $phi iNsTr_83 :=  ( $cast ($uint<64>) phitmp21x_xix_xi) $on bb_20_iq_err_calcx_xexit ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_19_iq_err_calcx_xexit 
    $endmerge
    iNsTr_84 := (torque_refx_x0 ^ tmp15x_xix_xi)
    iNsTr_85 := (iNsTr_84 & ( $bitcast ($uint<64> ) _b1000000000000000000000000000000000000000000000000000000000000000 ) )
    iNsTr_86 := (iNsTr_83 | iNsTr_85)
    tmp4x_xix_xi := ($bitcast ($float<11,52>) iNsTr_86)
    iNsTr_87 := ($cast ($float<8,23>) tmp4x_xix_xi)
    iNsTr_88 := (flux_refx_x0 - iNsTr_40)
    iNsTr_89 := (iNsTr_88 * ( $bitcast ($float<8,23> ) _f5.000000e-05 ) )
    iNsTr_90 := (iNsTr_89 + int_flux_err_temp_2x_x0)
    iNsTr_91 := (iNsTr_90 * ( $bitcast ($float<8,23> ) _f2.500000e+01 ) )
    // compare instruction
    iNsTr_92 := (iNsTr_91 < ( $bitcast ($float<8,23> ) _f-1.000000e+00 )  )
    $if iNsTr_92 $then  $place [iq_err_calcx_xexit_bb_24] $else $place [iq_err_calcx_xexit_bb_22] $endif 
    //begin: basic-block bb_22
    $merge iq_err_calcx_xexit_bb_22
    $endmerge
    // compare instruction
    iNsTr_105 := (iNsTr_91 > ( $bitcast ($float<8,23> ) _f1.000000e+00 )  )
    $if iNsTr_105 $then  $place [bb_22_bb_24] $else $place [bb_22_bb_23] $endif 
    //begin: basic-block bb_23
    $merge bb_22_bb_23
    $endmerge
    $place [bb_23_bb_24]
    //begin: basic-block bb_24
    $merge bb_22_bb_24 bb_23_bb_24 iq_err_calcx_xexit_bb_24
    $phi int_flux_errx_x0 :=  ( $cast ($float<8,23>) iNsTr_91) $on bb_23_bb_24 ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f-1.000000e+00 ) ) $on iq_err_calcx_xexit_bb_24 ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _f1.000000e+00 ) ) $on bb_22_bb_24 
    $endmerge
    iNsTr_101 := (iNsTr_88 * ( $bitcast ($float<8,23> ) _f6.500000e+01 ) )
    iNsTr_102 := (int_flux_errx_x0 + iNsTr_101)
    // compare instruction
    iNsTr_103 := (iNsTr_102 < ( $bitcast ($float<8,23> ) _f-2.000000e+00 )  )
    $if iNsTr_103 $then  $place [bb_24_xx_xthread12] $else $place [bb_24_bb_25] $endif 
    //begin: basic-block bb_25
    $merge bb_24_bb_25
    $endmerge
    // compare instruction
    iNsTr_110 := (iNsTr_102 > ( $bitcast ($float<8,23> ) _f2.000000e+00 )  )
    $if iNsTr_110 $then  $place [bb_25_xx_xthread12] $else $place [bb_25_bb_26] $endif 
    //begin: basic-block bb_26
    $merge bb_25_bb_26
    $endmerge
    phitmp := ($cast ($float<11,52>) iNsTr_102)
    phitmp7 := ($bitcast ($uint<64>) phitmp)
    iNsTr_126 := (phitmp7 & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    // compare instruction
    iNsTr_127 := (iNsTr_126 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if iNsTr_127 $then  $place [bb_26_fdiv32x_xexit] $else $place [bb_26_xx_xthread12] $endif 
    //begin: basic-block xx_xthread12
    $merge bb_24_xx_xthread12 bb_25_xx_xthread12 bb_26_xx_xthread12
    $phi phitmp20x_xi15x_xin :=  ( $cast ($uint<64>) phitmp7) $on bb_26_xx_xthread12 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b1100000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_24_xx_xthread12 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0100000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_25_xx_xthread12 
    $endmerge
    iNsTr_107 := (phitmp20x_xi15x_xin & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    tmp13x_xi := ($bitcast ($float<11,52>) iNsTr_107)
    iNsTr_108 := (tmp13x_xi * ( $bitcast ($float<11,52> ) _f1.235178e+00 ) )
    phitmp19x_xi := ($bitcast ($uint<64>) iNsTr_108)
    phitmp21x_xi := (phitmp19x_xi & ( $bitcast ($uint<64> ) _b0111111111111111111111111111111111111111111111111111111111111111 ) )
    $place [xx_xthread12_fdiv32x_xexit]
    //begin: basic-block fdiv32x_xexit
    $merge bb_26_fdiv32x_xexit xx_xthread12_fdiv32x_xexit
    $phi flux_addx_x0911 :=  ( $cast ($uint<64>) phitmp20x_xi15x_xin) $on xx_xthread12_fdiv32x_xexit ( $cast ($uint<64>) phitmp7) $on bb_26_fdiv32x_xexit 
    $phi iNsTr_113 :=  ( $cast ($uint<64>) phitmp21x_xi) $on xx_xthread12_fdiv32x_xexit ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bb_26_fdiv32x_xexit 
    $endmerge
    iNsTr_114 := (flux_addx_x0911 & ( $bitcast ($uint<64> ) _b1000000000000000000000000000000000000000000000000000000000000000 ) )
    iNsTr_115 := (iNsTr_113 | iNsTr_114)
    tmp4x_xi := ($bitcast ($float<11,52>) iNsTr_115)
    iNsTr_116 := ($cast ($float<8,23>) tmp4x_xi)
    out_data1 := iNsTr_116
    out_data2 := iNsTr_87
    out_data3 := iNsTr_42
    out_data4 := iNsTr_40
    phitmp1 := (iNsTr_40 * ( $bitcast ($float<8,23> ) _f9.995000e-01 ) )
    phitmp2 := (iNsTr_2 * ( $bitcast ($float<8,23> ) _f8.096000e-01 ) )
    phitmp3 := (phitmp2 * ( $bitcast ($float<8,23> ) _f5.000000e-04 ) )
    $place [fdiv32x_xexit_bb_1]
  }
}
